<?xml version="1.0" ?>
<project name="Quokka" default="test" xmlns="http://nant.sf.net/release/0.91/nant.xsd">
	<property name="framework.dir" value="${framework::get-framework-directory(nant.settings.currentframework)}"/>

	<property name="config" value="Release"/>

	<property name="root.dir" value="${path::get-full-path('..')}" overwrite="false"/>
	<property name="bin.dir" value="${root.dir}/bin/${config}" overwrite="false"/>
	<property name="bin35.dir" value="${root.dir}/bin/${config}.Net35" overwrite="false"/>
	<property name="artifacts.dir" value="${root.dir}/artifacts" overwrite="false"/>
	<property name="src.dir" value="${root.dir}/src" overwrite="false"/>
	<property name="temp.dir" value="${root.dir}/temp" overwrite="false"/>

	<property name="tools.dir" value="${path::get-full-path('/build/programs')}" overwrite="false"/>
	<property name="msbuild.dir" value="${framework.dir}"/>
	<property name="nuget.dir" value="${tools.dir}/nuget"/>
	<property name="signtool.dir" value="${tools.dir}/signtool" overwrite="false"/>

	<property name="cert.subject.name" value="Software Projects Pty Ltd"/>
	<property name="timestamp.service.url" value="http://timestamp.verisign.com/scripts/timstamp.dll"/>

	<!-- 
		VERSION NUMBERING STANDARD:
		
		The version number is acquired from an environment variable BUILD_NUMBER, which is set
		by the TeamCity build agent.
	-->

	<property name="product.version" value="${environment::get-variable('BUILD_NUMBER')}" if="${environment::variable-exists('BUILD_NUMBER')}"/>
	<property name="product.version" value="0.1.0.0" overwrite="false"/>
	<echo message="product.version: ${product.version}"/>

	<!-- parse the product.version for the major, minor, build and revision -->
	<property name="version.major" value="${version::get-major(version::parse(product.version))}"/>
	<property name="version.minor" value="${version::get-minor(version::parse(product.version))}"/>
	<property name="version.build" value="${version::get-build(version::parse(product.version))}"/>
	<property name="version.revision" value="${version::get-revision(version::parse(product.version))}"/>

	<!-- full product version, always has 4 parts (major, minor, build, revision) -->
	<property name="full.product.version" value="${version.major}.${version.minor}.${version.build}.${version.revision}"/>
	<echo message="full.product.version: ${full.product.version}"/>
	<property name="zip.file.name" value="Quokka-${full.product.version}.zip"/>
	<property name="zip.file.path" value="${path::get-full-path(artifacts.dir)}\${zip.file.name}"/>

	<!-- nuget repository details
	     ======================== -->

	<property name="nuget.server.url" value="${environment::get-variable('SP_NUGET_URL')}" if="${environment::variable-exists('SP_NUGET_URL')}"/>
	<property name="nuget.apikey" value="${environment::get-variable('SP_NUGET_APIKEY')}" if="${environment::variable-exists('SP_NUGET_APIKEY')}"/>
	<property name="nuget.canpush" value="${environment::variable-exists('SP_NUGET_URL')}"/>

	<target name="clean">
		<delete>
			<fileset>
				<include name="${bin.dir}/**"/>
				<include name="${bin35.dir}/**"/>
				<include name="${src.dir}/Quokka.*/bin/**"/>
				<include name="${src.dir}/Quokka.*/obj/**"/>
				<include name="${temp.dir}/**"/>
				<include name="${artifacts.dir}/**"/>
				<include name="CommonAssemblyInfo.cs"/>
			</fileset>
		</delete>
	</target>

	<target name="init">
		<!-- always the first target to run, but does nothing for now -->
	</target>

	<target name="timestamp" depends="init">
		<tstamp>
			<formatter property="build.year" pattern="yyyy"/>
			<formatter property="build.timestamp" pattern="yyyy-MM-ddTHH:mm:ss"/>
			<formatter property="build.date" pattern="yyyy-MM-dd"/>
			<formatter property="build.year.month" pattern="yyMM"/>
			<formatter property="build.day.hour" pattern="ddHH"/>
			<formatter property="build.minute.second" pattern="mmss"/>
		</tstamp>
		<property name="copyright" value="Copyright (c) 2004-${build.year} John Jeffery. All rights reserved."/>
	</target>

	<target name="CommonAssemblyInfo.cs" depends="timestamp">
		<asminfo language="CSharp" output="${src.dir}/CommonAssemblyInfo.cs">
			<imports>
				<import namespace="System"/>
				<import namespace="System.Reflection"/>
			</imports>
			<attributes>
				<attribute type="AssemblyVersionAttribute" value="${full.product.version}"/>
				<attribute type="AssemblyConfigurationAttribute" value="${config}"/>
				<attribute type="AssemblyCompanyAttribute" value="Quokka.org"/>
				<attribute type="AssemblyProductAttribute" value="Quokka"/>
				<attribute type="AssemblyCopyrightAttribute" value="${copyright}"/>
			</attributes>
		</asminfo>
	</target>

	<target name="compile.40" depends="CommonAssemblyInfo.cs">
		<exec program="msbuild.exe" basedir="${msbuild.dir}">
			<arg value="/property:Configuration=${config}"/>
			<arg value="/property:FormalBuild=true"/>
			<arg value="/verbosity:Minimal"/>
			<arg file="${root.dir}/Quokka.sln"/>
		</exec>
	</target>

	<target name="convert.35" depends="init">
		<!-- copies solution file and project files and converts to .NET 3.5 -->
		<exec program="vproj.exe" basedir="${tools.dir}/vproj">
			<arg value="--project"/>
			<arg file="${root.dir}/Quokka.sln"/>
		</exec>
	</target>

	<target name="compile.35" depends="convert.35,CommonAssemblyInfo.cs">
		<exec program="msbuild.exe" basedir="${msbuild.dir}">
			<arg value="/property:Configuration=${config}"/>
			<arg value="/property:FormalBuild=true"/>
			<arg value="/verbosity:Minimal"/>
			<arg file="${root.dir}/Quokka.Net35.sln"/>
		</exec>
	</target>

	<target name="compile" depends="compile.40,compile.35">
		
	</target>

	<target name="codesign.assemblies" depends="compile">
		<exec program="signtool.exe" basedir="${signtool.dir}">
			<arg value="sign"/>
			<arg value="/n"/>
			<arg value="${cert.subject.name}"/>
			<arg value="/t"/>
			<arg value="${timestamp.service.url}"/>
			<arg file="${bin.dir}/Quokka.Core.dll"/>
			<arg file="${bin.dir}/Quokka.Krypton.dll"/>
			<arg file="${bin.dir}/Quokka.NH.dll"/>
			<arg file="${bin35.dir}/Quokka.Core.dll"/>
			<arg file="${bin35.dir}/Quokka.Krypton.dll"/>
			<arg file="${bin35.dir}/Quokka.NH.dll"/>
		</exec>
	</target>

	<target name="artifacts.directory" depends="init">
		<mkdir dir="${artifacts.dir}"/>
	</target>

	<target name="zipfile" depends="nuget">
		<zip zipfile="${zip.file.path}">
			<fileset basedir="${temp.dir}/nuget">
				<include name="**" />
			</fileset>
		</zip>
		<!-- tell team city that the artifacts are ready, even though the build has not finished yet -->
		<echo message="##teamcity[publishArtifacts '${zip.file.path}']"/>
	</target>

	<target name="nuget" depends="artifacts.directory,codesign.assemblies">
		<nant buildfile="nuget/nuget.build" target="pack">
			<properties>
				<property name="project.name" value="Quokka.Core"/>
			</properties>
		</nant>
		<nant buildfile="nuget/nuget.build" target="pack">
			<properties>
				<property name="project.name" value="Quokka.Krypton"/>
			</properties>
		</nant>
		<nant buildfile="nuget/nuget.build" target="pack">
			<properties>
				<property name="project.name" value="Quokka.NH"/>
			</properties>
		</nant>
	</target>

	<target name="artifacts" depends="zipfile,nuget"/>

	<target name="test" depends="artifacts">
		<nunit2>
			<formatter type="Xml" usefile="true" extension=".xml"/>
			<formatter type="Plain"/>
			<test>
				<assemblies>
					<include name="${bin.dir}/Quokka*.Tests.dll"/>
					<include name="${bin35.dir}/Quokka*.Tests.dll"/>
				</assemblies>
			</test>
		</nunit2>
	</target>

	<target name="publish" depends="test" if="${nuget.canpush}">
		<exec program="nuget.exe" basedir="${nuget.dir}" if="${nuget.canpush}">
			<arg value="push"/>
			<arg file="${artifacts.dir}/Quokka.Core.${product.version}.nupkg"/>
			<arg value="-s"/>
			<arg value="${nuget.server.url}"/>
			<arg value="${nuget.apikey}"/>
		</exec>
		<exec program="nuget.exe" basedir="${nuget.dir}" if="${nuget.canpush}">
			<arg value="push"/>
			<arg file="${artifacts.dir}/Quokka.Krypton.${product.version}.nupkg"/>
			<arg value="-s"/>
			<arg value="${nuget.server.url}"/>
			<arg value="${nuget.apikey}"/>
		</exec>
	</target>
</project>
